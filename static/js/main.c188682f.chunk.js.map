{"version":3,"sources":["components/Tag.tsx","components/Combobox/Combobox.tsx","api.ts","providers/stateProvider.tsx","pages/Invite.tsx","utils/index.ts","pages/Finish.tsx","App.tsx","style/theme.js","style/components/button.js","index.tsx"],"names":["Tag","text","icon","onClose","bg","py","px","borderRadius","border","borderColor","aria-label","align","fontSize","color","Close","onClick","cursor","w","h","Combobox","suggestions","value","selected","onChange","onRemove","onSelect","isLoading","inputRef","useRef","position","current","focus","map","item","id","p","variant","ref","placeholder","length","in","shadow","mt","filter","some","borderBottom","renderSuggestions","delay","ms","Promise","resolve","setTimeout","ErrorRegex","Users","firstName","lastName","Math","random","toString","email","normalize","input","trim","toLowerCase","searchUser","a","normalized","match","Error","startsWith","sendInvitation","ids","initialState","invites","StateContext","createContext","dispatch","state","StateProvider","children","useState","Provider","Invite","onInviteDone","users","setUsers","setSelected","searchValue","setSearchValue","setIsLoading","isInviting","setInviting","useContext","buildSuggestions","useCallback","debounce","search","test","String","then","data","useEffect","name","size","Email","mb","spacing","e","target","filtredItems","selectedItem","disabled","Finish","onInvite","as","GiPartyPopper","invite","CheckCircleIcon","App","isOpen","setOpen","theme","fonts","body","heading","fontWeights","normal","semibold","colors","brand","bgPrimary","primary","secondary","bgSecondary","components","Button","baseStyle","fontWeight","sizes","md","padding","variants","solid","_hover","defaultProps","ReactDOM","render","StrictMode","resetCSS","extendTheme","document","getElementById"],"mappings":"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","file":"static/js/main.c188682f.chunk.js","sourcesContent":["import { ReactElement } from \"react\";\nimport { Box, Wrap, WrapItem, Text } from \"@chakra-ui/react\";\nimport { CloseIcon } from \"@chakra-ui/icons\";\n\ninterface ITag {\n  text: string;\n  icon?: ReactElement;\n  onClose: () => void;\n}\n\nconst Tag = ({ text, icon, onClose }: ITag) => {\n  return (\n    <Box\n      bg=\"brand.bgSecondary\"\n      py=\"1\"\n      px=\"3\"\n      borderRadius=\"lg\"\n      border=\"1px\"\n      borderColor=\"brand.secondary\"\n      aria-label=\"tag\"\n    >\n      <Wrap align=\"center\">\n        {icon && <WrapItem>{icon}</WrapItem>}\n        <WrapItem>\n          <Text fontSize=\"sm\" color=\"brand.secondary\">\n            {text}\n          </Text>\n        </WrapItem>\n        <WrapItem>\n          <CloseIcon\n            onClick={onClose}\n            cursor=\"pointer\"\n            w=\"10px\"\n            h=\"10px\"\n            color=\"brand.secondary\"\n            aria-label=\"close\"\n          />\n        </WrapItem>\n      </Wrap>\n    </Box>\n  );\n};\n\nexport default Tag;\n","import React, { ReactElement, useRef } from \"react\";\nimport { Box, Wrap, WrapItem, Text, Spinner, Center } from \"@chakra-ui/react\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Fade } from \"@chakra-ui/transition\";\n\nimport Tag from \"../Tag\";\n\nexport interface IItem {\n  id: string;\n  text: string;\n  icon?: ReactElement;\n}\n\ninterface ICombobox {\n  suggestions: Array<IItem>;\n  selected: Array<IItem>;\n  value: string;\n  isLoading: boolean;\n  onChange: (e: any) => void;\n  onRemove: (item: IItem) => void;\n  onSelect: (item: IItem) => void;\n}\n\nconst Combobox: React.FC<ICombobox> = ({\n  suggestions = [],\n  value,\n  selected = [],\n  onChange,\n  onRemove,\n  onSelect,\n  isLoading = false,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const renderSpiner = () => {\n    return (\n      <Box p=\"3\">\n        <Center>\n          <Spinner color=\"white\" />\n        </Center>\n      </Box>\n    );\n  };\n\n  const renderSuggestions = (suggestions: Array<IItem>) => {\n    return suggestions\n      .filter(({ id }) => !selected.some((item) => item.id === id))\n      .map((item) => (\n        <Box\n          key={item.id}\n          borderBottom=\"1px\"\n          p=\"3\"\n          cursor=\"pointer\"\n          onClick={() => {\n            onSelect(item);\n            inputRef.current?.focus();\n          }}\n        >\n          <Wrap align=\"center\">\n            <WrapItem>{item.icon}</WrapItem>\n            <WrapItem>\n              <Text color=\"brand.text\">{item.text}</Text>\n            </WrapItem>\n          </Wrap>\n        </Box>\n      ));\n  };\n\n  return (\n    <Box w=\"100%\" position=\"relative\">\n      <Box\n        aria-label=\"selections\"\n        px=\"1\"\n        py=\"1\"\n        bg=\"brand.bgSecondary\"\n        borderRadius=\"xl\"\n        border=\"1px\"\n        borderColor=\"#383C56\"\n        onClick={() => {\n          inputRef.current?.focus();\n        }}\n      >\n        <Wrap align=\"center\">\n          {selected.map((item) => {\n            return (\n              <WrapItem key={item.id}>\n                <Tag\n                  text={item.text}\n                  icon={item.icon}\n                  onClose={() => {\n                    onRemove(item);\n                  }}\n                />\n              </WrapItem>\n            );\n          })}\n          <WrapItem>\n            <Input\n              p=\"1\"\n              variant=\"unstyled\"\n              onChange={onChange}\n              value={value}\n              ref={inputRef}\n              color=\"white\"\n              placeholder={\n                selected.length === 0 ? \"Search names or emails...\" : \"\"\n              }\n            />\n          </WrapItem>\n        </Wrap>\n      </Box>\n      <Fade in={isLoading || suggestions.length > 0}>\n        <Box\n          position=\"absolute\"\n          w=\"100%\"\n          shadow=\"lg\"\n          mt=\"1\"\n          bg=\"brand.bgSecondary\"\n          aria-label=\"suggestions\"\n        >\n          {isLoading ? renderSpiner() : renderSuggestions(suggestions)}\n        </Box>\n      </Fade>\n    </Box>\n  );\n};\n\nexport default Combobox;\n","\nexport interface IUser {\n  firstName: string\n  lastName: string\n  email: string\n  id: string\n}\n\nconst delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n\nconst ErrorRegex = /error/gi\n\nconst Users = [\n  {\n    firstName: 'Tima',\n    lastName: 'tom',\n    id: (Math.random() * 1000).toString(),\n    email: 'tima@mail.com'\n  },\n  {\n    firstName: 'Tata',\n    lastName: 'Toto',\n    id: (Math.random() * 1000).toString(),\n    email: 'tata@gmail.com'\n  },\n  {\n    firstName: 'Jhone',\n    lastName: 'doe',\n    id: (Math.random() * 1000).toString(),\n    email: 'joe@mail.com'\n  },\n  {\n    firstName: 'Omar',\n    lastName: 'Chajia',\n    id: (Math.random() * 1000).toString(),\n    email: 'omar@gmail.com'\n  }\n]\n\nconst normalize = (input: string): string => {\n  return input.trim().toLowerCase()\n}\n\nexport const searchUser = async (input: string): Promise<IUser[]> => {\n  const normalized = normalize(input)\n\n  await delay(200 + Math.random() * 200)\n\n  if (normalized.match(ErrorRegex)) {\n    throw new Error('Backend failed for some reasons.')\n  }\n\n  if (!normalized) {\n    return []\n  }\n\n  return Users.filter(({ firstName, lastName, email }) => {\n    if (email === normalized) {\n      return true\n    }\n\n    if (normalize(firstName).startsWith(normalized)) {\n      return true\n    }\n\n    if (normalize(lastName).startsWith(normalized)) {\n      return true\n    }\n\n    return false\n  })\n}\n\nexport const sendInvitation = async (ids: Array<string>): Promise<string[]> => {\n  await delay(200 + Math.random() * 400);\n  return ids;\n}","import { createContext, useState } from \"react\";\n\ninterface IState {\n  invites: Array<any>;\n}\n\ninterface IContextProps {\n  state: IState;\n  dispatch: (state: any) => void;\n}\n\nconst initialState = {\n  invites: [],\n};\n\nexport const StateContext = createContext<IContextProps>({\n  dispatch: () => {},\n  state: initialState,\n});\n\nexport const StateProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useState<IState>(initialState);\n  return (\n    <StateContext.Provider\n      value={{\n        state,\n        dispatch,\n      }}\n    >\n      {children}\n    </StateContext.Provider>\n  );\n};\n","import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Box, Text, Button, Center, HStack, Avatar } from \"@chakra-ui/react\";\nimport debounce from \"lodash/debounce\";\nimport { EmailIcon } from \"@chakra-ui/icons\";\n\nimport Combobox, { IItem } from \"../components/Combobox\";\nimport { searchUser, IUser, sendInvitation } from \"../api\";\nimport { isEmail } from \"../utils\";\nimport { StateContext } from \"../providers/stateProvider\";\n\nconst Invite = ({ onInviteDone }: { onInviteDone: any }) => {\n  const [users, setUsers] = useState<Array<IUser>>([]);\n  const [selected, setSelected] = useState<Array<IItem>>([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInviting, setInviting] = useState(false);\n  const { dispatch } = useContext(StateContext);\n\n  const handleSearch = (e: any) => {\n    setSearchValue(e.target.value);\n  };\n\n  const handleSelect = (item: IItem) => {\n    setSelected([...selected, item]);\n    setUsers([]);\n    setSearchValue(\"\");\n  };\n\n  const handleRemove = (item: IItem) => {\n    const filtredItems = selected.filter((selectedItem) => {\n      return selectedItem.id !== item.id;\n    });\n    setSelected(filtredItems);\n  };\n\n  const handleSendInvitation = () => {\n    const ids = selected.map(({ text }) => text);\n    setInviting(true);\n    sendInvitation(ids).then((invites) => {\n      dispatch({\n        invites,\n      });\n      setInviting(false);\n      onInviteDone();\n    });\n  };\n\n  const buildSuggestions = useCallback(\n    debounce((search) => {\n      if (isEmail(search)) {\n        setUsers([\n          {\n            firstName: \"\",\n            lastName: \"\",\n            id: search,\n            email: search,\n          },\n        ]);\n      } else {\n        setIsLoading(true);\n        searchUser(search).then((data) => {\n          setUsers(data);\n          setIsLoading(false);\n        });\n      }\n    }, 200),\n    []\n  );\n\n  useEffect(() => {\n    if (!searchValue) {\n      setUsers([]);\n    } else {\n      buildSuggestions(searchValue);\n    }\n  }, [searchValue, buildSuggestions]);\n\n  const suggestions = users.map(\n    ({ firstName, email, id }): IItem => {\n      return {\n        id,\n        text: firstName || email,\n        icon: firstName ? (\n          <Avatar\n            name={firstName}\n            size=\"xs\"\n            bg=\"brand.secondary\"\n            color=\"white\"\n          />\n        ) : (\n          <EmailIcon w=\"5\" h=\"5\" color=\"brand.secondary\" />\n        ),\n      };\n    }\n  );\n\n  return (\n    <Box>\n      <Text color=\"brand.heading\" fontSize=\"md\" mb=\"4\">\n        Email invite\n      </Text>\n      <Text color=\"brand.text\" mb=\"4\">\n        Send members an email invitation to join this workspace.\n      </Text>\n      <HStack spacing=\"6\">\n        <Center w=\"100%\">\n          <Combobox\n            isLoading={isLoading}\n            value={searchValue}\n            suggestions={suggestions}\n            selected={selected}\n            onChange={handleSearch}\n            onRemove={handleRemove}\n            onSelect={handleSelect}\n          />\n        </Center>\n        <Center>\n          <Button\n            disabled={selected.length === 0}\n            borderRadius=\"lg\"\n            onClick={handleSendInvitation}\n            isLoading={isInviting}\n          >\n            Invite\n          </Button>\n        </Center>\n      </HStack>\n    </Box>\n  );\n};\n\nexport default Invite;\n","export const isEmail = (text: string): boolean => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(text).toLowerCase());\n};\n","import React, { useContext } from \"react\";\nimport {\n  Box,\n  Button,\n  Center,\n  Text,\n  List,\n  ListItem,\n  ListIcon,\n  Wrap,\n  WrapItem,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { CheckCircleIcon } from \"@chakra-ui/icons\";\nimport { GiPartyPopper } from \"react-icons/gi\";\n\nimport { StateContext } from \"../providers/stateProvider\";\ninterface IFinish {\n  onInvite: () => void;\n}\n\nconst Finish: React.FC<IFinish> = ({ onInvite }) => {\n  const {\n    state: { invites },\n  } = useContext(StateContext);\n\n  return (\n    <Center>\n      <Box bg=\"brand.bgPrimary\" w=\"2xl\" px=\"6\" py=\"10\" borderRadius=\"lg\">\n        <Center>\n          <Text color=\"green.300\" mb=\"6\">\n            <Icon w=\"8\" h=\"8\" as={GiPartyPopper} /> You have successfuly created\n            a meeting\n          </Text>\n        </Center>\n        <Box>\n          <Center>\n            {invites.length > 0 ? (\n              <Box mb=\"6\">\n                <Text color=\"white\" mb=\"6\">\n                  With the following teammates\n                </Text>\n                {invites.map((invite) => {\n                  return (\n                    <List spacing={10}>\n                      <ListItem>\n                        <Wrap align=\"center\">\n                          <WrapItem>\n                            <ListIcon as={CheckCircleIcon} color=\"green.500\" />\n                          </WrapItem>\n                          <WrapItem>\n                            <Text color=\"white\">{invite}</Text>\n                          </WrapItem>\n                        </Wrap>\n                      </ListItem>\n                    </List>\n                  );\n                })}\n              </Box>\n            ) : (\n              <Text color=\"brand.text\" mb=\"6\">\n                You have no teammates\n              </Text>\n            )}\n          </Center>\n          <Center>\n            <Button onClick={onInvite}>\n              {invites.length > 0 ? \"Invite more\" : \"Invite Teammates\"}\n            </Button>\n          </Center>\n        </Box>\n      </Box>\n    </Center>\n  );\n};\n\nexport default Finish;\n","import { useState } from \"react\";\nimport { Box, Center, Text } from \"@chakra-ui/react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  ModalHeader,\n} from \"@chakra-ui/react\";\n\nimport InvitePage from \"./pages/Invite\";\nimport FinishPage from \"./pages/Finish\";\n\nfunction App() {\n  const [isOpen, setOpen] = useState(false);\n  return (\n    <Box p=\"3\">\n      <FinishPage\n        onInvite={() => {\n          setOpen(true);\n        }}\n      />\n      <Modal isOpen={isOpen} onClose={() => setOpen(false)} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent px=\"6\" py=\"10\" bg=\"brand.bgPrimary\">\n          <ModalHeader>\n            <Center color=\"brand.heading\">\n              <Text fontSize=\"x-large\">Invite members</Text>\n            </Center>\n          </ModalHeader>\n          <ModalBody>\n            <InvitePage\n              onInviteDone={() => {\n                setOpen(false);\n              }}\n            />\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n}\n\nexport default App;\n","import { Button } from \"./components/button\";\n\nconst theme = {\n  fonts: {\n    body: \"Lato, sans-serif\",\n    heading: \"Lato, serif\",\n  },\n  fontWeights: {\n    normal: 400,\n    semibold: 400,\n  },\n  colors: {\n    brand: {\n      bgPrimary: \"#272D45\",\n      primary: \"#2C54EA\",\n      secondary: \"#EE748F\",\n      bgSecondary: \"#202437\",\n      heading: \"#DBE1E6\",\n      text: \"#8C9DB5\",\n    },\n  },\n  components: {\n    Button,\n  },\n};\n\nexport default theme;\n","export const Button = {\n  baseStyle: {\n    fontWeight: \"bold\",\n  },\n  sizes: {\n    md: {\n      fontSize: \"16px\",\n      padding: \"16px\",\n    },\n  },\n  variants: {\n    solid: {\n      borderColor: \"green.500\",\n      bg: \"#2C54EA\",\n      color: \"white\",\n      _hover: {\n        bg: \"#2D4392\",\n      },\n    },\n  },\n  // The default size and variant values\n  defaultProps: {\n    size: \"md\",\n    variant: \"solid\",\n  },\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\n\nimport App from \"./App\";\nimport theme from \"./style/theme\";\nimport { StateProvider } from \"./providers/stateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <ChakraProvider resetCSS theme={extendTheme(theme)}>\n        <App />\n      </ChakraProvider>\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}