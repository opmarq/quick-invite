{"version":3,"sources":["components/Tag.tsx","components/Combobox/Combobox.tsx","api.ts","providers/stateProvider.tsx","pages/Invite/InviteDuck.ts","pages/Invite/Invite.tsx","utils/index.ts","pages/Finish.tsx","App.tsx","style/theme.js","style/components/button.js","index.tsx"],"names":["Tag","text","icon","onClose","bg","py","px","borderRadius","border","borderColor","aria-label","align","fontSize","color","Close","onClick","cursor","w","h","Combobox","suggestions","value","selected","onChange","onRemove","onSelect","helperText","isLoading","inputRef","useRef","position","current","focus","map","item","id","p","variant","ref","placeholder","length","in","shadow","mt","filter","some","borderBottom","renderSuggestions","delay","ms","Promise","resolve","setTimeout","ErrorRegex","Users","firstName","lastName","Math","random","toString","email","normalize","input","trim","toLowerCase","searchUser","a","normalized","match","Error","startsWith","sendInvitation","ids","initialState","invites","StateContext","createContext","dispatch","state","StateProvider","children","useState","Provider","SET_USERS","FETCH_USERS","CLEAR_USERS","SET_ERROR","users","errorMessage","inviteReducer","action","type","payload","Invite","onInviteDone","useReducer","inviteInitialstate","inviteDispatch","setSelected","searchValue","setSearchValue","isInviting","setInviting","useContext","buildSuggestions","useCallback","debounce","search","test","String","data","message","useEffect","name","size","Email","mb","spacing","e","target","filtredItems","selectedItem","disabled","then","Finish","onInvite","as","GiPartyPopper","invite","CheckCircleIcon","App","isOpen","setOpen","m","theme","fonts","body","heading","fontWeights","normal","semibold","colors","brand","bgPrimary","primary","secondary","bgSecondary","components","Button","baseStyle","fontWeight","sizes","md","padding","variants","solid","_hover","_disabled","defaultProps","ReactDOM","render","StrictMode","resetCSS","extendTheme","document","getElementById"],"mappings":"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","file":"static/js/main.afcb36d7.chunk.js","sourcesContent":["import { ReactElement } from \"react\";\nimport { Box, Wrap, WrapItem, Text } from \"@chakra-ui/react\";\nimport { CloseIcon } from \"@chakra-ui/icons\";\n\ninterface ITag {\n  text: string;\n  icon?: ReactElement;\n  onClose: () => void;\n}\n\nconst Tag = ({ text, icon, onClose }: ITag) => {\n  return (\n    <Box\n      bg=\"brand.bgSecondary\"\n      py=\"1\"\n      px=\"3\"\n      borderRadius=\"lg\"\n      border=\"1px\"\n      borderColor=\"brand.secondary\"\n      aria-label=\"tag\"\n    >\n      <Wrap align=\"center\">\n        {icon && <WrapItem>{icon}</WrapItem>}\n        <WrapItem>\n          <Text fontSize=\"sm\" color=\"brand.secondary\">\n            {text}\n          </Text>\n        </WrapItem>\n        <WrapItem>\n          <CloseIcon\n            onClick={onClose}\n            cursor=\"pointer\"\n            w=\"10px\"\n            h=\"10px\"\n            color=\"brand.secondary\"\n            aria-label=\"close\"\n          />\n        </WrapItem>\n      </Wrap>\n    </Box>\n  );\n};\n\nexport default Tag;\n","import React, { ReactElement, useRef } from \"react\";\nimport { Box, Wrap, WrapItem, Text, Spinner, Center } from \"@chakra-ui/react\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Fade } from \"@chakra-ui/transition\";\n\nimport Tag from \"../Tag\";\n\nexport interface IItem {\n  id: string;\n  text: string;\n  icon?: ReactElement;\n}\n\ninterface ICombobox {\n  suggestions: Array<IItem>;\n  selected: Array<IItem>;\n  value: string;\n  isLoading: boolean;\n  helperText?: string;\n  onChange: (e: any) => void;\n  onRemove: (item: IItem) => void;\n  onSelect: (item: IItem) => void;\n}\n\nconst Combobox: React.FC<ICombobox> = ({\n  suggestions = [],\n  value,\n  selected = [],\n  onChange,\n  onRemove,\n  onSelect,\n  helperText,\n  isLoading = false,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const renderSpiner = () => {\n    return (\n      <Box p=\"3\">\n        <Center>\n          <Spinner color=\"white\" />\n        </Center>\n      </Box>\n    );\n  };\n\n  const renderSuggestions = (suggestions: Array<IItem>) => {\n    return suggestions\n      .filter(({ id }) => !selected.some((item) => item.id === id))\n      .map((item) => (\n        <Box\n          key={item.id}\n          borderBottom=\"1px\"\n          p=\"3\"\n          cursor=\"pointer\"\n          onClick={() => {\n            onSelect(item);\n            inputRef.current?.focus();\n          }}\n        >\n          <Wrap align=\"center\">\n            <WrapItem>{item.icon}</WrapItem>\n            <WrapItem>\n              <Text color=\"brand.text\">{item.text}</Text>\n            </WrapItem>\n          </Wrap>\n        </Box>\n      ));\n  };\n\n  return (\n    <Box w=\"100%\" position=\"relative\">\n      <Box\n        aria-label=\"selections\"\n        px=\"1\"\n        py=\"1\"\n        bg=\"brand.bgSecondary\"\n        borderRadius=\"xl\"\n        border=\"1px\"\n        borderColor=\"#383C56\"\n        onClick={() => {\n          inputRef.current?.focus();\n        }}\n      >\n        <Wrap align=\"center\">\n          {selected.map((item) => {\n            return (\n              <WrapItem key={item.id}>\n                <Tag\n                  text={item.text}\n                  icon={item.icon}\n                  onClose={() => {\n                    onRemove(item);\n                  }}\n                />\n              </WrapItem>\n            );\n          })}\n          <WrapItem>\n            <Input\n              p=\"1\"\n              variant=\"unstyled\"\n              onChange={onChange}\n              value={value}\n              ref={inputRef}\n              color=\"white\"\n              placeholder={\n                selected.length === 0 ? \"Search names or emails...\" : \"\"\n              }\n            />\n          </WrapItem>\n        </Wrap>\n      </Box>\n      {helperText && (\n        <Text color=\"red.600\" fontSize=\"sm\">\n          {helperText}\n        </Text>\n      )}\n      <Fade in={isLoading || suggestions.length > 0}>\n        <Box\n          position=\"absolute\"\n          w=\"100%\"\n          shadow=\"lg\"\n          mt=\"1\"\n          bg=\"brand.bgSecondary\"\n          aria-label=\"suggestions\"\n        >\n          {isLoading ? renderSpiner() : renderSuggestions(suggestions)}\n        </Box>\n      </Fade>\n    </Box>\n  );\n};\n\nexport default Combobox;\n","\nexport interface IUser {\n  firstName: string\n  lastName: string\n  email: string\n  id: string\n}\n\nconst delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n\nconst ErrorRegex = /error/gi\n\nconst Users = [\n  {\n    firstName: 'Tima',\n    lastName: 'tom',\n    id: (Math.random() * 1000).toString(),\n    email: 'tima@mail.com'\n  },\n  {\n    firstName: 'Tata',\n    lastName: 'Toto',\n    id: (Math.random() * 1000).toString(),\n    email: 'tata@gmail.com'\n  },\n  {\n    firstName: 'Jhone',\n    lastName: 'doe',\n    id: (Math.random() * 1000).toString(),\n    email: 'joe@mail.com'\n  },\n  {\n    firstName: 'Omar',\n    lastName: 'Chajia',\n    id: (Math.random() * 1000).toString(),\n    email: 'omar@gmail.com'\n  }\n]\n\nconst normalize = (input: string): string => {\n  return input.trim().toLowerCase()\n}\n\nexport const searchUser = async (input: string): Promise<IUser[]> => {\n  const normalized = normalize(input)\n\n  await delay(200 + Math.random() * 200)\n\n  if (normalized.match(ErrorRegex)) {\n    throw new Error('Backend failed for some reasons.')\n  }\n\n  if (!normalized) {\n    return []\n  }\n\n  return Users.filter(({ firstName, lastName, email }) => {\n    if (email === normalized) {\n      return true\n    }\n\n    if (normalize(firstName).startsWith(normalized)) {\n      return true\n    }\n\n    if (normalize(lastName).startsWith(normalized)) {\n      return true\n    }\n\n    return false\n  })\n}\n\nexport const sendInvitation = async (ids: Array<string>): Promise<string[]> => {\n  await delay(200 + Math.random() * 200);\n  return ids;\n}","import { createContext, useState } from \"react\";\n\ninterface IState {\n  invites: Array<any>;\n}\n\ninterface IContextProps {\n  state: IState;\n  dispatch: (state: any) => void;\n}\n\nconst initialState = {\n  invites: [],\n};\n\nexport const StateContext = createContext<IContextProps>({\n  dispatch: () => {},\n  state: initialState,\n});\n\nexport const StateProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useState<IState>(initialState);\n  return (\n    <StateContext.Provider\n      value={{\n        state,\n        dispatch,\n      }}\n    >\n      {children}\n    </StateContext.Provider>\n  );\n};\n","import { IUser } from \"../../api\";\n\n\ninterface IInviteState {\n    isLoading: boolean;\n    users: Array<IUser>;\n    errorMessage: string;\n}\n\ninterface IAction {\n    type: string;\n    payload?: any\n}\n\nexport const SET_USERS = \"SET_USERS\";\nexport const FETCH_USERS = \"FETCH_USERS\";\nexport const CLEAR_USERS = \"CLEAR_USERS\";\nexport const SET_ERROR = \"SET_ERROR\";\n\n\nexport const initialState: IInviteState = {\n    isLoading: false,\n    users: [],\n    errorMessage: \"\"\n}\n\nexport const inviteReducer = (state = initialState, action: IAction): IInviteState => {\n    switch (action.type) {\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.payload,\n                isLoading: false,\n                errorMessage: \"\"\n            }\n        case CLEAR_USERS:\n            return {\n                ...state,\n                users: [],\n                errorMessage: \"\",\n                isLoading: false\n            };\n        case FETCH_USERS:\n            return {\n                ...state,\n                isLoading: true,\n                errorMessage: \"\",\n            }\n        case SET_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n                errorMessage: action.payload,\n            }\n        default:\n            return state;\n    }\n}\n","import {\n  useCallback,\n  useContext,\n  useEffect,\n  useReducer,\n  useState,\n} from \"react\";\nimport { Box, Text, Button, Center, HStack, Avatar } from \"@chakra-ui/react\";\nimport debounce from \"lodash/debounce\";\nimport { EmailIcon } from \"@chakra-ui/icons\";\n\nimport Combobox, { IItem } from \"../../components/Combobox\";\nimport { searchUser, sendInvitation } from \"../../api\";\nimport { isEmail } from \"../../utils\";\nimport { StateContext } from \"../../providers/stateProvider\";\nimport {\n  inviteReducer,\n  initialState as inviteInitialstate,\n  SET_USERS,\n  CLEAR_USERS,\n  SET_ERROR,\n  FETCH_USERS,\n} from \"./InviteDuck\";\n\nconst Invite = ({ onInviteDone }: { onInviteDone: any }) => {\n  const [{ users, errorMessage, isLoading }, inviteDispatch] = useReducer(\n    inviteReducer,\n    inviteInitialstate\n  );\n  const [selected, setSelected] = useState<Array<IItem>>([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [isInviting, setInviting] = useState(false);\n  const { dispatch } = useContext(StateContext);\n\n  const handleSearch = (e: any) => {\n    setSearchValue(e.target.value);\n  };\n\n  const handleSelect = (item: IItem) => {\n    setSelected([...selected, item]);\n    setSearchValue(\"\");\n    inviteDispatch({ type: CLEAR_USERS });\n  };\n\n  const handleRemove = (item: IItem) => {\n    const filtredItems = selected.filter((selectedItem) => {\n      return selectedItem.id !== item.id;\n    });\n    setSelected(filtredItems);\n  };\n\n  const handleSendInvitation = () => {\n    const ids = selected.map(({ text }) => text);\n    setInviting(true);\n    sendInvitation(ids).then((invites) => {\n      dispatch({\n        invites,\n      });\n      setInviting(false);\n      onInviteDone();\n    });\n  };\n\n  const buildSuggestions = useCallback(\n    debounce(async (search) => {\n      if (isEmail(search)) {\n        inviteDispatch({\n          type: SET_USERS,\n          payload: [\n            {\n              firstName: \"\",\n              lastName: \"\",\n              id: search,\n              email: search,\n            },\n          ],\n        });\n      } else {\n        inviteDispatch({\n          type: FETCH_USERS,\n        });\n        try {\n          const data = await searchUser(search);\n          inviteDispatch({\n            type: SET_USERS,\n            payload: data,\n          });\n        } catch (e) {\n          inviteDispatch({\n            type: SET_ERROR,\n            payload: e.message,\n          });\n        }\n      }\n    }, 200),\n    []\n  );\n\n  useEffect(() => {\n    if (!searchValue) {\n      inviteDispatch({ type: CLEAR_USERS });\n    } else {\n      buildSuggestions(searchValue);\n    }\n  }, [searchValue, buildSuggestions]);\n\n  const suggestions = users.map(\n    ({ firstName, email, id }): IItem => {\n      return {\n        id,\n        text: firstName || email,\n        icon: firstName ? (\n          <Avatar\n            name={firstName}\n            size=\"xs\"\n            bg=\"brand.secondary\"\n            color=\"white\"\n          />\n        ) : (\n          <EmailIcon w=\"5\" h=\"5\" color=\"brand.secondary\" />\n        ),\n      };\n    }\n  );\n\n  return (\n    <Box>\n      <Text color=\"brand.heading\" fontSize=\"md\" mb=\"4\">\n        Email invite\n      </Text>\n      <Text color=\"brand.text\" mb=\"4\">\n        Send members an email invitation to join this workspace.\n      </Text>\n      <HStack spacing=\"4\">\n        <Center w=\"100%\">\n          <Combobox\n            isLoading={isLoading}\n            value={searchValue}\n            suggestions={suggestions}\n            selected={selected}\n            onChange={handleSearch}\n            onRemove={handleRemove}\n            onSelect={handleSelect}\n            helperText={errorMessage}\n          />\n        </Center>\n        <Center>\n          <Button\n            disabled={selected.length === 0}\n            borderRadius=\"lg\"\n            onClick={handleSendInvitation}\n            isLoading={isInviting}\n          >\n            Invite\n          </Button>\n        </Center>\n      </HStack>\n    </Box>\n  );\n};\n\nexport default Invite;\n","export const isEmail = (text: string): boolean => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(text).toLowerCase());\n};\n","import React, { useContext } from \"react\";\nimport {\n  Box,\n  Button,\n  Center,\n  Text,\n  List,\n  ListItem,\n  ListIcon,\n  Wrap,\n  WrapItem,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { CheckCircleIcon } from \"@chakra-ui/icons\";\nimport { GiPartyPopper } from \"react-icons/gi\";\n\nimport { StateContext } from \"../providers/stateProvider\";\ninterface IFinish {\n  onInvite: () => void;\n}\n\nconst Finish: React.FC<IFinish> = ({ onInvite }) => {\n  const {\n    state: { invites },\n  } = useContext(StateContext);\n\n  return (\n    <Center>\n      <Box bg=\"brand.bgPrimary\" w=\"2xl\" px=\"6\" py=\"10\" borderRadius=\"lg\">\n        <Center>\n          <Text color=\"green.300\" mb=\"6\">\n            <Icon w=\"8\" h=\"8\" as={GiPartyPopper} /> You have successfuly created\n            a meeting\n          </Text>\n        </Center>\n        <Box>\n          <Center>\n            {invites.length > 0 ? (\n              <Box mb=\"6\">\n                <Text color=\"white\" mb=\"6\">\n                  With the following teammates\n                </Text>\n                {invites.map((invite) => {\n                  return (\n                    <List spacing={10}>\n                      <ListItem>\n                        <Wrap align=\"center\">\n                          <WrapItem>\n                            <ListIcon as={CheckCircleIcon} color=\"green.500\" />\n                          </WrapItem>\n                          <WrapItem>\n                            <Text color=\"white\">{invite}</Text>\n                          </WrapItem>\n                        </Wrap>\n                      </ListItem>\n                    </List>\n                  );\n                })}\n              </Box>\n            ) : (\n              <Text color=\"brand.text\" mb=\"6\">\n                You have no teammates\n              </Text>\n            )}\n          </Center>\n          <Center>\n            <Button onClick={onInvite}>\n              {invites.length > 0 ? \"Invite more\" : \"Invite Teammates\"}\n            </Button>\n          </Center>\n        </Box>\n      </Box>\n    </Center>\n  );\n};\n\nexport default Finish;\n","import { useState } from \"react\";\nimport { Box, Center, Text } from \"@chakra-ui/react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  ModalHeader,\n} from \"@chakra-ui/react\";\n\nimport InvitePage from \"./pages/Invite/\";\nimport FinishPage from \"./pages/Finish\";\n\nfunction App() {\n  const [isOpen, setOpen] = useState(false);\n  return (\n    <Box p=\"3\">\n      <FinishPage\n        onInvite={() => {\n          setOpen(true);\n        }}\n      />\n      <Modal isOpen={isOpen} onClose={() => setOpen(false)} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent px=\"6\" py=\"10\" m=\"2\" bg=\"brand.bgPrimary\">\n          <ModalHeader>\n            <Center color=\"brand.heading\">\n              <Text fontSize=\"x-large\">Invite members</Text>\n            </Center>\n          </ModalHeader>\n          <ModalBody>\n            <InvitePage\n              onInviteDone={() => {\n                setOpen(false);\n              }}\n            />\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n}\n\nexport default App;\n","import { Button } from \"./components/button\";\n\nconst theme = {\n  fonts: {\n    body: \"Lato, sans-serif\",\n    heading: \"Lato, serif\",\n  },\n  fontWeights: {\n    normal: 400,\n    semibold: 400,\n  },\n  colors: {\n    brand: {\n      bgPrimary: \"#272D45\",\n      primary: \"#2C54EA\",\n      secondary: \"#EE748F\",\n      bgSecondary: \"#202437\",\n      heading: \"#DBE1E6\",\n      text: \"#8C9DB5\",\n    },\n  },\n  components: {\n    Button,\n  },\n};\n\nexport default theme;\n","export const Button = {\n  baseStyle: {\n    fontWeight: \"bold\",\n  },\n  sizes: {\n    md: {\n      fontSize: \"16px\",\n      padding: \"16px\",\n    },\n  },\n  variants: {\n    solid: {\n      borderColor: \"green.500\",\n      bg: \"#2C54EA\",\n      color: \"white\",\n      _hover: {\n        bg: \"#202437\",\n      },\n      _disabled: {\n        color: \"black\",\n      },\n    },\n  },\n  // The default size and variant values\n  defaultProps: {\n    size: \"md\",\n    variant: \"solid\",\n  },\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\n\nimport App from \"./App\";\nimport theme from \"./style/theme\";\nimport { StateProvider } from \"./providers/stateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <ChakraProvider resetCSS theme={extendTheme(theme)}>\n        <App />\n      </ChakraProvider>\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}